{"version":3,"sources":["../node_modules/solar-calc/lib/sun.js","../node_modules/solar-calc/lib/moon.js","../node_modules/solar-calc/lib/solarCalc.js","../node_modules/solar-calc/index.js","../node_modules/css-prefers-color-scheme/client.mjs","nightlife.js"],"names":["client","colorIndexRegExp","style","forEach","call","document","styleSheets","styleSheet","cssRules","cssRule","mediaMatch","Object","media","mediaText","match","test","replace","SolarCalc","require","prefersColorScheme","default","NAME","error","message","Error","log","console","nightlife","calcSunriseAndSunset","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","then","coords","latitude","longitude","Date","catch","err","sunrise","setHours","sunset","toggleNightMode","isNight","now","assign","clearTimeout","timeout","setDate","getDate","setTimeout","listeners","cb","getTime","init","on","event","hasOwnProperty","push","window"],"mappings":"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","file":"nightlife.map","sourceRoot":"..\\src","sourcesContent":["\"use strict\";\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\nvar Sun = (function () {\n  function Sun(date, latitude, longitude) {\n    _classCallCheck(this, Sun);\n\n    this.date = date;\n    this.latitude = latitude;\n    this.longitude = longitude;\n\n    this.julianDate = getJD(date);\n  }\n\n  _createClass(Sun, {\n    solarNoon: {\n      get: function () {\n        return calcSolNoon(this.julianDate, this.longitude, this.date);\n      }\n    },\n    timeAtAngle: {\n      value: function timeAtAngle(angle, rising) {\n        return calcSunriseSet(rising, angle, this.julianDate, this.date, this.latitude, this.longitude);\n      }\n    }\n  });\n\n  return Sun;\n})();\n\nvar formatDate = function formatDate(date, minutes) {\n  var seconds = (minutes - Math.floor(minutes)) * 60;\n  return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), 0, minutes, seconds));\n};\n\nfunction calcTimeJulianCent(jd) {\n  var T = (jd - 2451545) / 36525;\n  return T;\n}\n\nfunction isLeapYear(yr) {\n  return yr % 4 === 0 && yr % 100 !== 0 || yr % 400 === 0;\n}\n\nfunction calcDoyFromJD(jd) {\n  var z = Math.floor(jd + 0.5);\n  var f = jd + 0.5 - z;\n  var A;\n  if (z < 2299161) {\n    A = z;\n  } else {\n    var alpha = Math.floor((z - 1867216.25) / 36524.25);\n    A = z + 1 + alpha - Math.floor(alpha / 4);\n  }\n  var B = A + 1524;\n  var C = Math.floor((B - 122.1) / 365.25);\n  var D = Math.floor(365.25 * C);\n  var E = Math.floor((B - D) / 30.6001);\n  var day = B - D - Math.floor(30.6001 * E) + f;\n  var month = E < 14 ? E - 1 : E - 13;\n  var year = month > 2 ? C - 4716 : C - 4715;\n\n  var k = isLeapYear(year) ? 1 : 2;\n  var doy = Math.floor(275 * month / 9) - k * Math.floor((month + 9) / 12) + day - 30;\n  return doy;\n}\n\nfunction radToDeg(angleRad) {\n  return 180 * angleRad / Math.PI;\n}\n\nfunction degToRad(angleDeg) {\n  return Math.PI * angleDeg / 180;\n}\n\nfunction calcGeomMeanLongSun(t) {\n  var L0 = 280.46646 + t * (36000.76983 + t * 0.0003032);\n  while (L0 > 360) {\n    L0 -= 360;\n  }\n  while (L0 < 0) {\n    L0 += 360;\n  }\n  return L0; // in degrees\n}\n\nfunction calcGeomMeanAnomalySun(t) {\n  var M = 357.52911 + t * (35999.05029 - 0.0001537 * t);\n  return M; // in degrees\n}\n\nfunction calcEccentricityEarthOrbit(t) {\n  var e = 0.016708634 - t * (0.000042037 + 1.267e-7 * t);\n  return e; // unitless\n}\n\nfunction calcSunEqOfCenter(t) {\n  var m = calcGeomMeanAnomalySun(t);\n  var mrad = degToRad(m);\n  var sinm = Math.sin(mrad);\n  var sin2m = Math.sin(mrad + mrad);\n  var sin3m = Math.sin(mrad + mrad + mrad);\n  var C = sinm * (1.914602 - t * (0.004817 + 0.000014 * t)) + sin2m * (0.019993 - 0.000101 * t) + sin3m * 0.000289;\n  return C; // in degrees\n}\n\nfunction calcSunTrueLong(t) {\n  var l0 = calcGeomMeanLongSun(t);\n  var c = calcSunEqOfCenter(t);\n  var O = l0 + c;\n  return O; // in degrees\n}\n\nfunction calcSunApparentLong(t) {\n  var o = calcSunTrueLong(t);\n  var omega = 125.04 - 1934.136 * t;\n  var lambda = o - 0.00569 - 0.00478 * Math.sin(degToRad(omega));\n  return lambda; // in degrees\n}\n\nfunction calcMeanObliquityOfEcliptic(t) {\n  var seconds = 21.448 - t * (46.815 + t * (0.00059 - t * 0.001813));\n  var e0 = 23 + (26 + seconds / 60) / 60;\n  return e0; // in degrees\n}\n\nfunction calcObliquityCorrection(t) {\n  var e0 = calcMeanObliquityOfEcliptic(t);\n  var omega = 125.04 - 1934.136 * t;\n  var e = e0 + 0.00256 * Math.cos(degToRad(omega));\n  return e; // in degrees\n}\n\nfunction calcSunDeclination(t) {\n  var e = calcObliquityCorrection(t);\n  var lambda = calcSunApparentLong(t);\n\n  var sint = Math.sin(degToRad(e)) * Math.sin(degToRad(lambda));\n  var theta = radToDeg(Math.asin(sint));\n  return theta; // in degrees\n}\n\nfunction calcEquationOfTime(t) {\n  var epsilon = calcObliquityCorrection(t);\n  var l0 = calcGeomMeanLongSun(t);\n  var e = calcEccentricityEarthOrbit(t);\n  var m = calcGeomMeanAnomalySun(t);\n\n  var y = Math.tan(degToRad(epsilon) / 2);\n  y *= y;\n\n  var sin2l0 = Math.sin(2 * degToRad(l0));\n  var sinm = Math.sin(degToRad(m));\n  var cos2l0 = Math.cos(2 * degToRad(l0));\n  var sin4l0 = Math.sin(4 * degToRad(l0));\n  var sin2m = Math.sin(2 * degToRad(m));\n\n  var Etime = y * sin2l0 - 2 * e * sinm + 4 * e * y * sinm * cos2l0 - 0.5 * y * y * sin4l0 - 1.25 * e * e * sin2m;\n  return radToDeg(Etime) * 4; // in minutes of time\n}\n\nfunction calcHourAngle(angle, lat, solarDec) {\n  var latRad = degToRad(lat);\n  var sdRad = degToRad(solarDec);\n  var HAarg = Math.cos(degToRad(90 + angle)) / (Math.cos(latRad) * Math.cos(sdRad)) - Math.tan(latRad) * Math.tan(sdRad);\n  var HA = Math.acos(HAarg);\n  return HA; // in radians (for sunset, use -HA)\n}\n\nfunction isNumber(inputVal) {\n  var oneDecimal = false;\n  var inputStr = \"\" + inputVal;\n  for (var i = 0; i < inputStr.length; i++) {\n    var oneChar = inputStr.charAt(i);\n    if (i === 0 && (oneChar === \"-\" || oneChar === \"+\")) {\n      continue;\n    }\n    if (oneChar === \".\" && !oneDecimal) {\n      oneDecimal = true;\n      continue;\n    }\n    if (oneChar < \"0\" || oneChar > \"9\") {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getJD(date) {\n  var year = date.getFullYear();\n  var month = date.getMonth() + 1;\n  var day = date.getDate();\n\n  var A = Math.floor(year / 100);\n  var B = 2 - A + Math.floor(A / 4);\n  var JD = Math.floor(365.25 * (year + 4716)) + Math.floor(30.6001 * (month + 1)) + day + B - 1524.5;\n  return JD;\n}\n\nfunction calcSolNoon(jd, longitude, date) {\n  var tnoon = calcTimeJulianCent(jd - longitude / 360);\n  var eqTime = calcEquationOfTime(tnoon);\n  var solNoonOffset = 720 - longitude * 4 - eqTime; // in minutes\n  var newt = calcTimeJulianCent(jd + solNoonOffset / 1440);\n  eqTime = calcEquationOfTime(newt);\n  var solNoonLocal = 720 - longitude * 4 - eqTime; // in minutes\n  while (solNoonLocal < 0) {\n    solNoonLocal += 1440;\n  }\n  while (solNoonLocal >= 1440) {\n    solNoonLocal -= 1440;\n  }\n  return formatDate(date, solNoonLocal);\n  // return timeString(solNoonLocal, 3);\n}\n\nfunction dayString(jd) {\n  if (jd < 900000 || jd > 2817000) {\n    return \"error\";\n  } else {\n    var z = Math.floor(jd + 0.5);\n    var f = jd + 0.5 - z;\n    var A;\n    if (z < 2299161) {\n      A = z;\n    } else {\n      var alpha = Math.floor((z - 1867216.25) / 36524.25);\n      A = z + 1 + alpha - Math.floor(alpha / 4);\n    }\n    var B = A + 1524;\n    var C = Math.floor((B - 122.1) / 365.25);\n    var D = Math.floor(365.25 * C);\n    var E = Math.floor((B - D) / 30.6001);\n    var day = B - D - Math.floor(30.6001 * E) + f;\n    var month = E < 14 ? E - 1 : E - 13;\n    var year = month > 2 ? C - 4716 : C - 4715;\n    return new Date(Date.UTC(year, month - 1, day, 0, 0, 0));\n  }\n}\n\nfunction calcSunriseSetUTC(rise, angle, JD, latitude, longitude) {\n  var t = calcTimeJulianCent(JD);\n  var eqTime = calcEquationOfTime(t);\n  var solarDec = calcSunDeclination(t);\n  var hourAngle = calcHourAngle(angle, latitude, solarDec);\n  //alert(\"HA = \" + radToDeg(hourAngle));\n  if (!rise) hourAngle = -hourAngle;\n  var delta = longitude + radToDeg(hourAngle);\n  var timeUTC = 720 - 4 * delta - eqTime; // in minutes\n  return timeUTC;\n}\n\nfunction calcSunriseSet(rise, angle, JD, date, latitude, longitude)\n// rise = 1 for sunrise, 0 for sunset\n{\n  var timeUTC = calcSunriseSetUTC(rise, angle, JD, latitude, longitude);\n  var newTimeUTC = calcSunriseSetUTC(rise, angle, JD + timeUTC / 1440, latitude, longitude);\n  if (isNumber(newTimeUTC)) {\n\n    return formatDate(date, newTimeUTC);\n  } else {\n    // no sunrise/set found\n    var doy = calcDoyFromJD(JD);\n    var jdy;\n    if (latitude > 66.4 && doy > 79 && doy < 267 || latitude < -66.4 && (doy < 83 || doy > 263)) {\n      //previous sunrise/next sunset\n      jdy = calcJDofNextPrevRiseSet(!rise, rise, angle, JD, latitude, longitude);\n      return dayString(jdy);\n    } else {\n      //previous sunset/next sunrise\n      jdy = calcJDofNextPrevRiseSet(rise, rise, angle, JD, latitude, longitude);\n      return dayString(jdy);\n    }\n  }\n}\n\nfunction calcJDofNextPrevRiseSet(next, rise, type, JD, latitude, longitude) {\n  var julianday = JD;\n  var increment = next ? 1 : -1;\n\n  var time = calcSunriseSetUTC(rise, type, julianday, latitude, longitude);\n  while (!isNumber(time)) {\n    julianday += increment;\n    time = calcSunriseSetUTC(rise, type, julianday, latitude, longitude);\n  }\n\n  return julianday;\n}\n\nmodule.exports = Sun;","\"use strict\";\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\nvar Moon = (function () {\n  function Moon(date, latitude, longitude) {\n    _classCallCheck(this, Moon);\n\n    this.date = date;\n    this.latitude = latitude;\n    this.longitude = longitude;\n\n    this.julianDate = getJD(date);\n  }\n\n  _createClass(Moon, {\n    illuminosity: {\n      get: function () {\n        return moonPhase(this.date) / 360;\n      }\n    },\n    distance: {\n      get: function () {\n        return moonPos(this.date).distance;\n      }\n    }\n  });\n\n  return Moon;\n})();\n\n// Utility functions for astronomical programming.\n// JavaScript by Peter Hayes http://www.peter-hayes.freeserve.co.uk/\n// Copyright 2001-2002\n// This code is made freely available but please keep this notice.\n// I accept no liability for any errors in my coding but please\n// let me know of any errors you find. My address is on my home page.\n\nfunction getJD(date) {\n  var year = date.getFullYear();\n  var month = date.getMonth() + 1;\n  var day = date.getDate();\n\n  var A = Math.floor(year / 100);\n  var B = 2 - A + Math.floor(A / 4);\n  var JD = Math.floor(365.25 * (year + 4716)) + Math.floor(30.6001 * (month + 1)) + day + B - 1524.5;\n  return JD;\n}\n\n// function dayno(year, month, day, hours) {\n//   // Day number is a modified Julian date, day 0 is 2000 January 0.0\n//   // which corresponds to a Julian date of 2451543.5\n//   var A = Math.floor(year / 100);\n//   var B = 2 - A + Math.floor(A / 4);\n//   var JD = Math.floor(365.25 * (year + 4716)) + Math.floor(30.6001 * (month + 1)) + day + B - 1524.5 + hours;\n//   return JD;\n// }\n\n// function julian(year, month, day, hours) {\n//   return dayno(year, month, day, hours) + 2451543.5;\n// }\n\n// function jdtocd(jd) {\n//   // The calendar date from julian date\n//   // Returns year, month, day, day of week, hours, minutes, seconds\n//   var Z = Math.floor(jd + 0.5);\n//   var F = jd + 0.5 - Z;\n//   if (Z < 2299161) {\n//     var A = Z;\n//   } else {\n//     var alpha = Math.floor((Z - 1867216.25) / 36524.25);\n//     var A = Z + 1 + alpha - Math.floor(alpha / 4);\n//   }\n//   var B = A + 1524;\n//   var C = Math.floor((B - 122.1) / 365.25);\n//   var D = Math.floor(365.25 * C);\n//   var E = Math.floor((B - D) / 30.6001);\n//   var d = B - D - Math.floor(30.6001 * E) + F;\n//   if (E < 14) {\n//     var month = E - 1;\n//   } else {\n//     var month = E - 13;\n//   }\n//   if (month > 2) {\n//     var year = C - 4716;\n//   } else {\n//     var year = C - 4715;\n//   }\n//   var day = Math.floor(d);\n//   var h = (d - day) * 24;\n//   var hours = Math.floor(h);\n//   var m = (h - hours) * 60;\n//   var minutes = Math.floor(m);\n//   var seconds = Math.round((m - minutes) * 60);\n//   if (seconds >= 60) {\n//     minutes = minutes + 1;\n//     seconds = seconds - 60;\n//   }\n//   if (minutes >= 60) {\n//     hours = hours + 1;\n//     minutes = 0;\n//   }\n//   var dw = Math.floor(jd + 1.5) - 7 * Math.floor((jd + 1.5) / 7);\n//   return [year, month, day, dw, hours, minutes, seconds];\n// }\n\n// function local_sidereal(year, month, day, hours, lon) {\n//   // Compute local siderial time in degrees\n//   // year, month, day and hours are the Greenwich date and time\n//   // lon is the observers longitude\n//   var d = dayno(year, month, day, hours);\n//   var lst = (98.9818 + 0.985647352 * d + hours * 15 + lon);\n//   return rev(lst) / 15;\n// }\n\n// function radtoaa(ra, dec, year, month, day, hours, lat, lon) {\n//   // convert ra and dec to altitude and azimuth\n//   // year, month, day and hours are the Greenwich date and time\n//   // lat and lon are the observers latitude and longitude\n//   var lst = local_sidereal(year, month, day, hours, lon);\n//   var x = cosd(15.0 * (lst - ra)) * cosd(dec);\n//   var y = sind(15.0 * (lst - ra)) * cosd(dec);\n//   var z = sind(dec);\n//   // rotate so z is the local zenith\n//   var xhor = x * sind(lat) - z * cosd(lat);\n//   var yhor = y;\n//   var zhor = x * cosd(lat) + z * sind(lat);\n//   var azimuth = rev(atan2d(yhor, xhor) + 180.0); // so 0 degrees is north\n//   var altitude = atan2d(zhor, Math.sqrt(xhor * xhor + yhor * yhor));\n//   return [altitude, azimuth];\n// }\n\n// Extensions to the Math routines - Trig routines in degrees\n// JavaScript by Peter Hayes http://www.peter-hayes.freeserve.co.uk/\n// Copyright 2001-2002\n\nfunction rev(angle) {\n  return angle - Math.floor(angle / 360) * 360;\n}\n\nfunction sind(angle) {\n  return Math.sin(angle * Math.PI / 180);\n}\n\nfunction cosd(angle) {\n  return Math.cos(angle * Math.PI / 180);\n}\n\nfunction tand(angle) {\n  return Math.tan(angle * Math.PI / 180);\n}\n\nfunction asind(c) {\n  return 180 / Math.PI * Math.asin(c);\n}\n\n// function acosd(c) {\n//   return (180.0 / Math.PI) * Math.acos(c);\n// }\n\nfunction atan2d(y, x) {\n  return 180 / Math.PI * Math.atan(y / x) - 180 * (x < 0);\n}\n\n// function anglestring(a, circle) {\n//   // returns a in degrees as a string degrees:minutes\n//   // circle is true for range between 0 and 360 and false for -90 to +90\n//   var ar = Math.round(a * 60) / 60;\n//   var deg = Math.abs(ar);\n//   var min = Math.round(60.0 * (deg - Math.floor(deg)));\n//   if (min >= 60) {\n//     deg += 1;\n//     min = 0;\n//   }\n//   var anglestr = \"\";\n//   if (!circle) anglestr += (ar < 0 ? \"-\" : \"+\");\n//   if (circle) anglestr += ((Math.floor(deg) < 100) ? \"0\" : \"\");\n//   anglestr += ((Math.floor(deg) < 10) ? \"0\" : \"\") + Math.floor(deg);\n//   anglestr += ((min < 10) ? \":0\" : \":\") + (min);\n//   return anglestr;\n// }\n\n// JavaScript by Peter Hayes http://www.aphayes.pwp.blueyonder.co.uk/\n// Copyright 2001-2010\n// Unless otherwise stated this code is based on the methods in\n// Astronomical Algorithms, first edition, by Jean Meeus\n// Published by Willmann-Bell, Inc.\n// This code is made freely available but please keep this notice.\n// The calculations are approximate but should be good enough for general use,\n// I accept no responsibility for errors in astronomy or coding.\n\n// WARNING moonrise code changed on 6 May 2003 to correct a systematic error\n// these are now local times NOT UTC as the original code did.\n\n// Meeus first edition table 45.A Longitude and distance of the moon\n\nvar T45AD = [0, 2, 2, 0, 0, 0, 2, 2, 2, 2, 0, 1, 0, 2, 0, 0, 4, 0, 4, 2, 2, 1, 1, 2, 2, 4, 2, 0, 2, 2, 1, 2, 0, 0, 2, 2, 2, 4, 0, 3, 2, 4, 0, 2, 2, 2, 4, 0, 4, 1, 2, 0, 1, 3, 4, 2, 0, 1, 2, 2];\n\nvar T45AM = [0, 0, 0, 0, 1, 0, 0, -1, 0, -1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, -1, 0, 0, 0, 1, 0, -1, 0, -2, 1, 2, -2, 0, 0, -1, 0, 0, 1, -1, 2, 2, 1, -1, 0, 0, -1, 0, 1, 0, 1, 0, 0, -1, 2, 1, 0, 0];\n\nvar T45AMP = [1, -1, 0, 2, 0, 0, -2, -1, 1, 0, -1, 0, 1, 0, 1, 1, -1, 3, -2, -1, 0, -1, 0, 1, 2, 0, -3, -2, -1, -2, 1, 0, 2, 0, -1, 1, 0, -1, 2, -1, 1, -2, -1, -1, -2, 0, 1, 4, 0, -2, 0, 2, 1, -2, -3, 2, 1, -1, 3, -1];\n\nvar T45AF = [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, -2, 2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, -2, 2, 0, 2, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, -2, -2, 0, 0, 0, 0, 0, 0, 0, -2];\n\nvar T45AL = [6288774, 1274027, 658314, 213618, -185116, -114332, 58793, 57066, 53322, 45758, -40923, -34720, -30383, 15327, -12528, 10980, 10675, 10034, 8548, -7888, -6766, -5163, 4987, 4036, 3994, 3861, 3665, -2689, -2602, 2390, -2348, 2236, -2120, -2069, 2048, -1773, -1595, 1215, -1110, -892, -810, 759, -713, -700, 691, 596, 549, 537, 520, -487, -399, -381, 351, -340, 330, 327, -323, 299, 294, 0];\n\nvar T45AR = [-20905355, -3699111, -2955968, -569925, 48888, -3149, 246158, -152138, -170733, -204586, -129620, 108743, 104755, 10321, 0, 79661, -34782, -23210, -21636, 24208, 30824, -8379, -16675, -12831, -10445, -11650, 14403, -7003, 0, 10056, 6322, -9884, 5751, 0, -4950, 4130, 0, -3958, 0, 3258, 2616, -1897, -2117, 2354, 0, 0, -1423, -1117, -1571, -1739, 0, -4421, 0, 0, 0, 0, 1165, 0, 0, 8752];\n\n// Meeus table 45B latitude of the moon\n\nvar T45BD = [0, 0, 0, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 4, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4, 4, 0, 4, 2, 2, 2, 2, 0, 2, 2, 2, 2, 4, 2, 2, 0, 2, 1, 1, 0, 2, 1, 2, 0, 4, 4, 1, 4, 1, 4, 2];\n\nvar T45BM = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 1, -1, -1, -1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 1, 0, -1, -2, 0, 1, 1, 1, 1, 1, 0, -1, 1, 0, -1, 0, 0, 0, -1, -2];\n\nvar T45BMP = [0, 1, 1, 0, -1, -1, 0, 2, 1, 2, 0, -2, 1, 0, -1, 0, -1, -1, -1, 0, 0, -1, 0, 1, 1, 0, 0, 3, 0, -1, 1, -2, 0, 2, 1, -2, 3, 2, -3, -1, 0, 0, 1, 0, 1, 1, 0, 0, -2, -1, 1, -2, 2, -2, -1, 1, 1, -1, 0, 0];\n\nvar T45BF = [1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 3, 1, 1, 1, -1, -1, -1, 1, -1, 1, -3, 1, -3, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 3, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1];\n\nvar T45BL = [5128122, 280602, 277693, 173237, 55413, 46271, 32573, 17198, 9266, 8822, 8216, 4324, 4200, -3359, 2463, 2211, 2065, -1870, 1828, -1794, -1749, -1565, -1491, -1475, -1410, -1344, -1335, 1107, 1021, 833, 777, 671, 607, 596, 491, -451, 439, 422, 421, -366, -351, 331, 315, 302, -283, -229, 223, 223, -220, -220, -185, 181, -177, 176, 166, -164, 132, -119, 115, 107];\n\n// MoonPos calculates the Moon position, based on Meeus chapter 45\n\nfunction moonPos(date) {\n  // julian date\n  var jd = getJD(date) + 2451543.5;\n  var T = (jd - 2451545) / 36525;\n  var T2 = T * T;\n  var T3 = T2 * T;\n  var T4 = T3 * T;\n  // Moons mean longitude L'\n  var LP = 218.3164477 + 481267.88123421 * T - 0.0015786 * T2 + T3 / 538841 - T4 / 65194000;\n  // Moons mean elongation\n  var D = 297.8501921 + 445267.1114034 * T - 0.0018819 * T2 + T3 / 545868 - T4 / 113065000;\n  // Suns mean anomaly\n  var M = 357.5291092 + 35999.0502909 * T - 0.0001536 * T2 + T3 / 24490000;\n  // Moons mean anomaly M'\n  var MP = 134.9633964 + 477198.8675055 * T + 0.0087414 * T2 + T3 / 69699 - T4 / 14712000;\n  // Moons argument of latitude\n  var F = 93.272095 + 483202.0175233 * T - 0.0036539 * T2 - T3 / 3526000 + T4 / 863310000;\n\n  // Additional arguments\n  var A1 = 119.75 + 131.849 * T;\n  var A2 = 53.09 + 479264.29 * T;\n  var A3 = 313.45 + 481266.484 * T;\n  var E = 1 - 0.002516 * T - 0.0000074 * T2;\n  var E2 = E * E;\n  // Sums of periodic terms from table 45.A and 45.B\n  var Sl = 0;\n  var Sr = 0;\n  for (var i = 0; i < 60; i++) {\n    var Eterm = 1;\n    if (Math.abs(T45AM[i]) === 1) Eterm = E;\n    if (Math.abs(T45AM[i]) === 2) Eterm = E2;\n    Sl += T45AL[i] * Eterm * sind(rev(T45AD[i] * D + T45AM[i] * M + T45AMP[i] * MP + T45AF[i] * F));\n    Sr += T45AR[i] * Eterm * cosd(rev(T45AD[i] * D + T45AM[i] * M + T45AMP[i] * MP + T45AF[i] * F));\n  }\n  var Sb = 0;\n  for (var i = 0; i < 60; i++) {\n    var Eterm = 1;\n    if (Math.abs(T45BM[i]) === 1) Eterm = E;\n    if (Math.abs(T45BM[i]) === 2) Eterm = E2;\n    Sb += T45BL[i] * Eterm * sind(rev(T45BD[i] * D + T45BM[i] * M + T45BMP[i] * MP + T45BF[i] * F));\n  }\n  // Additional additive terms\n  Sl = Sl + 3958 * sind(rev(A1)) + 1962 * sind(rev(LP - F)) + 318 * sind(rev(A2));\n  Sb = Sb - 2235 * sind(rev(LP)) + 382 * sind(rev(A3)) + 175 * sind(rev(A1 - F)) + 175 * sind(rev(A1 + F)) + 127 * sind(rev(LP - MP)) - 115 * sind(rev(LP + MP));\n  // geocentric longitude, latitude and distance\n  var mglong = rev(LP + Sl / 1000000);\n  var mglat = rev(Sb / 1000000);\n  if (mglat > 180) mglat = mglat - 360;\n  var mr = Math.round(385000.56 + Sr / 1000);\n  // Obliquity of Ecliptic\n  var obl = 23.4393 - 3.563e-9 * (jd - 2451543.5);\n  // RA and dec\n  var ra = rev(atan2d(sind(mglong) * cosd(obl) - tand(mglat) * sind(obl), cosd(mglong))) / 15;\n  var dec = rev(asind(sind(mglat) * cosd(obl) + cosd(mglat) * sind(obl) * sind(mglong)));\n  if (dec > 180) dec = dec - 360;\n  return {\n    ra: ra,\n    dec: dec,\n    distance: mr\n  };\n}\n\n// function MoonRise(year, month, day, TZ, latitude, longitude) {\n//   // returns an array containing rise and set times or one of the\n//   // following codes.\n//   // -1 rise or set event not found and moon was down at 00:00\n//   // -2 rise or set event not found and moon was up   at 00:00\n//   // WARNING code changes on 6/7 May 2003 these are now local times\n//   // NOT UTC and rise/set not found codes changed.\n//   var hours = 0;\n//   var riseset = [];\n//   // elh is the elevation at the hour elhdone is true if elh calculated\n//   var elh = [];\n//   var elhdone = [];\n//   for (var i = 0; i <= 24; i++) {\n//     elhdone[i] = false;\n//   }\n//   // Compute the moon elevation at start and end of day\n//   // store elevation at the hours in an array elh to save search time\n//   var rad = MoonPos(year, month, day, hours - TZ);\n//   var altaz = radtoaa(rad[0], rad[1], year, month, day, hours - TZ, latitude, longitude);\n//   elh[0] = altaz[0];\n//   elhdone[0] = true;\n//   // set the return code to allow for always up or never rises\n//   if (elh[0] > 0.0) {\n//     riseset = [-2, -2];\n//   } else {\n//     riseset = [-1, -1];\n//   }\n//   hours = 24;\n//   rad = MoonPos(year, month, day, hours - TZ);\n//   altaz = radtoaa(rad[0], rad[1], year, month, day, hours - TZ, latitude, longitude);\n//   elh[24] = altaz[0];\n//   elhdone[24] = true;\n//   // search for moonrise and set\n//   for (var rise = 0; rise < 2; rise++) {\n//     var found = false;\n//     var hfirst = 0;\n//     var hlast = 24;\n//     // Try a binary chop on the hours to speed the search\n//     while (Math.ceil((hlast - hfirst) / 2) > 1) {\n//       hmid = hfirst + Math.round((hlast - hfirst) / 2);\n//       if (!elhdone[hmid]) {\n//         hours = hmid;\n//         rad = MoonPos(year, month, day, hours - TZ);\n//         altaz = radtoaa(rad[0], rad[1], year, month, day, hours - TZ, latitude, longitude);\n//         elh[hmid] = altaz[0];\n//         elhdone[hmid] = true;\n//       }\n//       if (((rise === 0) && (elh[hfirst] <= 0.0) && (elh[hmid] >= 0.0)) ||\n//         ((rise === 1) && (elh[hfirst] >= 0.0) && (elh[hmid] <= 0.0))) {\n//         hlast = hmid;\n//         found = true;\n//         continue;\n//       }\n//       if (((rise === 0) && (elh[hmid] <= 0.0) && (elh[hlast] >= 0.0)) ||\n//         ((rise === 1) && (elh[hmid] >= 0.0) && (elh[hlast] <= 0.0))) {\n//         hfirst = hmid;\n//         found = true;\n//         continue;\n//       }\n//       break;\n//     }\n//     // If the binary chop did not find a 1 hour interval\n//     if ((hlast - hfirst) > 1) {\n//       for (var i = hfirst; i < hlast; i++) {\n//         found = false;\n//         if (!elhdone[i + 1]) {\n//           hours = i + 1;\n//           rad = MoonPos(year, month, day, hours - TZ);\n//           altaz = radtoaa(rad[0], rad[1], year, month, day, hours - TZ, latitude, longitude);\n//           elh[hours] = altaz[0];\n//           elhdone[hours] = true;\n//         }\n//         if (((rise === 0) && (elh[i] <= 0.0) && (elh[i + 1] >= 0.0)) ||\n//           ((rise === 1) && (elh[i] >= 0.0) && (elh[i + 1] <= 0.0))) {\n//           hfirst = i;\n//           hlast = i + 1;\n//           found = true;\n//           break;\n//         }\n//       }\n//     }\n//     // simple linear interpolation for the minutes\n//     if (found) {\n//       var elfirst = elh[hfirst];\n//       var ellast = elh[hlast];\n//       hours = hfirst + 0.5;\n//       rad = MoonPos(year, month, day, hours - TZ);\n//       altaz = radtoaa(rad[0], rad[1], year, month, day, hours - TZ, latitude, longitude);\n//       // alert(\"day =\"+day+\" hour =\"+hours+\" altaz=\"+altaz[0]+\" \"+altaz[1]);\n//       if ((rise == 0) && (altaz[0] <= 0.0)) {\n//         hfirst = hours;\n//         elfirst = altaz[0];\n//       }\n//       if ((rise == 0) && (altaz[0] > 0.0)) {\n//         hlast = hours;\n//         ellast = altaz[0];\n//       }\n//       if ((rise == 1) && (altaz[0] <= 0.0)) {\n//         hlast = hours;\n//         ellast = altaz[0];\n//       }\n//       if ((rise === 1) && (altaz[0] > 0.0)) {\n//         hfirst = hours;\n//         elfirst = altaz[0];\n//       }\n//       var eld = Math.abs(elfirst) + Math.abs(ellast);\n//       riseset[rise] = hfirst + (hlast - hfirst) * Math.abs(elfirst) / eld;\n//     }\n//   } // End of rise/set loop\n//   return (riseset);\n// }\n\nfunction moonPhase(date) {\n  // the illuminated percentage from Meeus chapter 46\n  var j = getJD(date) + 2451543.5;\n  var T = (j - 2451545) / 36525;\n  var T2 = T * T;\n  var T3 = T2 * T;\n  var T4 = T3 * T;\n  // Moons mean elongation Meeus first edition\n  // var D=297.8502042+445267.1115168*T-0.0016300*T2+T3/545868.0-T4/113065000.0;\n  // Moons mean elongation Meeus second edition\n  var D = 297.8501921 + 445267.1114034 * T - 0.0018819 * T2 + T3 / 545868 - T4 / 113065000;\n  // Moons mean anomaly M' Meeus first edition\n  // var MP=134.9634114+477198.8676313*T+0.0089970*T2+T3/69699.0-T4/14712000.0;\n  // Moons mean anomaly M' Meeus second edition\n  var MP = 134.9633964 + 477198.8675055 * T + 0.0087414 * T2 + T3 / 69699 - T4 / 14712000;\n  // Suns mean anomaly\n  var M = 357.5291092 + 35999.0502909 * T - 0.0001536 * T2 + T3 / 24490000;\n  // phase angle\n  var pa = 180 - D - 6.289 * sind(MP) + 2.1 * sind(M) - 1.274 * sind(2 * D - MP) - 0.658 * sind(2 * D) - 0.214 * sind(2 * MP) - 0.11 * sind(D);\n  return rev(pa);\n}\n\n// function MoonQuarters(year, month, day) {\n//   // returns an array of Julian Ephemeris Days (JDE) for\n//   // new moon, first quarter, full moon and last quarter\n//   // Meeus first edition chapter 47 with only the most larger additional corrections\n//   // Meeus code calculate Terrestrial Dynamic Time\n//   // TDT = UTC + (number of leap seconds) + 32.184\n//   // At the end of June 2012 the 25th leap second was added\n//   //\n//   var quarters = [];\n//   // k is an integer for new moon incremented by 0.25 for first quarter 0.5 for new etc.\n//   var k = Math.floor((year + ((month - 1) + day / 30) / 12 - 2000) * 12.3685);\n//   // Time in Julian centuries since 2000.0\n//   var T = k / 1236.85;\n//   // Sun's mean anomaly\n//   var M = rev(2.5534 + 29.10535669 * k - 0.0000218 * T * T);\n//   // Moon's mean anomaly (M' in Meeus)\n//   var MP = rev(201.5643 + 385.81693528 * k + 0.0107438 * T * T + 0.00001239 * T * T * T - 0.00000011 * T * T * T);\n//   var E = 1 - 0.002516 * T - 0.0000074 * T * T;\n//   // Moons argument of latitude\n//   var F = rev(160.7108 + 390.67050274 * k - 0.0016341 * T * T - 0.00000227 * T * T * T + 0.000000011 * T * T * T * T);\n//   // Longitude of ascending node of lunar orbit\n//   var Omega = rev(124.7746 - 1.56375580 * k + 0.0020691 * T * T + 0.00000215 * T * T * T);\n//   // The full planetary arguments include 14 terms, only used the 7 most significant\n//   var A = [];\n//   A[1] = rev(299.77 + 0.107408 * k - 0.009173 * T * T);\n//   A[2] = rev(251.88 + 0.016321 * k);\n//   A[3] = rev(251.83 + 26.651886 * k);\n//   A[4] = rev(349.42 + 36.412478 * k);\n//   A[5] = rev(84.88 + 18.206239 * k);\n//   A[6] = rev(141.74 + 53.303771 * k);\n//   A[7] = rev(207.14 + 2.453732 * k);\n\n//   // New moon\n//   var JDE0 = 2451550.09765 + 29.530588853 * k + 0.0001337 * T * T - 0.000000150 * T * T * T + 0.00000000073 * T * T * T * T;\n//   // Correct for TDT since 1 July 2012\n//   JDE0 = JDE0 - 57.184 / (24 * 60 * 60);\n//   var JDE = JDE0 - 0.40720 * sind(MP) + 0.17241 * E * sind(M) + 0.01608 * sind(2 * MP) + 0.01039 * sind(2 * F) + 0.00739 * E * sind(MP - M) - 0.00514 * E * sind(MP + M) + 0.00208 * E * E * sind(2 * M) - 0.00111 * sind(MP - 2 * F) - 0.00057 * sind(MP + 2 * F) + 0.00056 * E * sind(2 * MP + M) - 0.00042 * sind(3 * MP) + 0.00042 * E * sind(M + 2 * F) + 0.00038 * E * sind(M - 2 * F) - 0.00024 * E * sind(2 * MP - M) - 0.00017 * sind(Omega) - 0.00007 * sind(MP + 2 * M);\n\n//   quarters[0] = JDE + 0.000325 * sind(A[1]) + 0.000165 * sind(A[2]) + 0.000164 * sind(A[3]) + 0.000126 * sind(A[4]) + 0.000110 * sind(A[5]) + 0.000062 * sind(A[6]) + 0.000060 * sind(A[7]);\n\n//   // The following code needs tidying up with a loop and conditionals for each quarter\n//   // First Quarter k=k+0.25\n//   JDE = JDE0 + 29.530588853 * 0.25;\n//   M = rev(M + 29.10535669 * 0.25);\n//   MP = rev(MP + 385.81693528 * 0.25);\n//   F = rev(F + 390.67050274 * 0.25);\n//   Omega = rev(Omega - 1.56375580 * 0.25);\n//   A[1] = rev(A[1] + 0.107408 * 0.25);\n//   A[2] = rev(A[2] + 0.016321 * 0.25);\n//   A[3] = rev(A[3] + 26.651886 * 0.25);\n//   A[4] = rev(A[4] + 36.412478 * 0.25);\n//   A[5] = rev(A[5] + 18.206239 * 0.25);\n//   A[6] = rev(A[6] + 53.303771 * 0.25);\n//   A[7] = rev(A[7] + 2.453732 * 0.25);\n\n//   JDE = JDE - 0.62801 * sind(MP) + 0.17172 * E * sind(M) - 0.01183 * E * sind(MP + M) + 0.00862 * sind(2 * MP) + 0.00804 * sind(2 * F) + 0.00454 * E * sind(MP - M) + 0.00204 * E * E * sind(2 * M) - 0.00180 * sind(MP - 2 * F) - 0.00070 * sind(MP + 2 * F) - 0.00040 * sind(3 * MP) - 0.00034 * E * sind(2 * MP - M) + 0.00032 * E * sind(M + 2 * F) + 0.00032 * E * sind(M - 2 * F) - 0.00028 * E * E * sind(MP + 2 * M) + 0.00027 * E * sind(2 * MP + M) - 0.00017 * sind(Omega);\n//   // Next term is w add for first quarter & subtract for second\n//   JDE = JDE + (0.00306 - 0.00038 * E * cosd(M) + 0.00026 * cosd(MP) - 0.00002 * cosd(MP - M) + 0.00002 * cosd(MP + M) + 0.00002 * cosd(2 * F));\n\n//   quarters[1] = JDE + 0.000325 * sind(A[1]) + 0.000165 * sind(A[2]) + 0.000164 * sind(A[3]) + 0.000126 * sind(A[4]) + 0.000110 * sind(A[5]) + 0.000062 * sind(A[6]) + 0.000060 * sind(A[7]);\n\n//   // Full moon k=k+0.5\n//   JDE = JDE0 + 29.530588853 * 0.5;\n//   // Already added 0.25 for first quarter\n//   M = rev(M + 29.10535669 * 0.25);\n//   MP = rev(MP + 385.81693528 * 0.25);\n//   F = rev(F + 390.67050274 * 0.25);\n//   Omega = rev(Omega - 1.56375580 * 0.25);\n//   A[1] = rev(A[1] + 0.107408 * 0.25);\n//   A[2] = rev(A[2] + 0.016321 * 0.25);\n//   A[3] = rev(A[3] + 26.651886 * 0.25);\n//   A[4] = rev(A[4] + 36.412478 * 0.25);\n//   A[5] = rev(A[5] + 18.206239 * 0.25);\n//   A[6] = rev(A[6] + 53.303771 * 0.25);\n//   A[7] = rev(A[7] + 2.453732 * 0.25);\n\n//   JDE = JDE - 0.40614 * sind(MP) + 0.17302 * E * sind(M) + 0.01614 * sind(2 * MP) + 0.01043 * sind(2 * F) + 0.00734 * E * sind(MP - M) - 0.00515 * E * sind(MP + M) + 0.00209 * E * E * sind(2 * M) - 0.00111 * sind(MP - 2 * F) - 0.00057 * sind(MP + 2 * F) + 0.00056 * E * sind(2 * MP + M) - 0.00042 * sind(3 * MP) + 0.00042 * E * sind(M + 2 * F) + 0.00038 * E * sind(M - 2 * F) - 0.00024 * E * sind(2 * MP - M) - 0.00017 * sind(Omega) - 0.00007 * sind(MP + 2 * M);\n\n//   quarters[2] = JDE + 0.000325 * sind(A[1]) + 0.000165 * sind(A[2]) + 0.000164 * sind(A[3]) + 0.000126 * sind(A[4]) + 0.000110 * sind(A[5]) + 0.000062 * sind(A[6]) + 0.000060 * sind(A[7]);\n\n//   // Last Quarter k=k+0.75\n//   JDE = JDE0 + 29.530588853 * 0.75;\n//   // Already added 0.5 for full moon\n//   M = rev(M + 29.10535669 * 0.25);\n//   MP = rev(MP + 385.81693528 * 0.25);\n//   F = rev(F + 390.67050274 * 0.25);\n//   Omega = rev(Omega - 1.56375580 * 0.25);\n//   A[1] = rev(A[1] + 0.107408 * 0.25);\n//   A[2] = rev(A[2] + 0.016321 * 0.25);\n//   A[3] = rev(A[3] + 26.651886 * 0.25);\n//   A[4] = rev(A[4] + 36.412478 * 0.25);\n//   A[5] = rev(A[5] + 18.206239 * 0.25);\n//   A[6] = rev(A[6] + 53.303771 * 0.25);\n//   A[7] = rev(A[7] + 2.453732 * 0.25);\n\n//   JDE = JDE - 0.62801 * sind(MP) + 0.17172 * E * sind(M) - 0.01183 * E * sind(MP + M) + 0.00862 * sind(2 * MP) + 0.00804 * sind(2 * F) + 0.00454 * E * sind(MP - M) + 0.00204 * E * E * sind(2 * M) - 0.00180 * sind(MP - 2 * F) - 0.00070 * sind(MP + 2 * F) - 0.00040 * sind(3 * MP) - 0.00034 * E * sind(2 * MP - M) + 0.00032 * E * sind(M + 2 * F) + 0.00032 * E * sind(M - 2 * F) - 0.00028 * E * E * sind(MP + 2 * M) + 0.00027 * E * sind(2 * MP + M) - 0.00017 * sind(Omega);\n//   // Next term is w add for first quarter & subtract for second\n//   JDE = JDE - (0.00306 - 0.00038 * E * cosd(M) + 0.00026 * cosd(MP) - 0.00002 * cosd(MP - M) + 0.00002 * cosd(MP + M) + 0.00002 * cosd(2 * F));\n\n//   quarters[3] = JDE + 0.000325 * sind(A[1]) + 0.000165 * sind(A[2]) + 0.000164 * sind(A[3]) + 0.000126 * sind(A[4]) + 0.000110 * sind(A[5]) + 0.000062 * sind(A[6]) + 0.000060 * sind(A[7]);\n\n//   return quarters;\n// }\n\nmodule.exports = Moon;","\"use strict\";\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\nvar Sun = require(\"./sun.js\");\nvar Moon = require(\"./moon.js\");\n\nvar degreesBelowHorizon = {\n  sunrise: 0.833,\n  sunriseEnd: 0.3,\n  twilight: 6,\n  nauticalTwilight: 12,\n  night: 18,\n  goldenHour: -6\n};\n\nvar SolarCalc = (function () {\n  function SolarCalc(date, latitude, longitude) {\n    _classCallCheck(this, SolarCalc);\n\n    this.date = date;\n    this.lat = latitude;\n    this.longitude = longitude;\n\n    this.sun = new Sun(date, latitude, longitude);\n    this.moon = new Moon(date, latitude, longitude);\n  }\n\n  _createClass(SolarCalc, {\n    solarNoon: {\n      get: function () {\n        return this.sun.solarNoon;\n      }\n    },\n    sunrise: {\n      get: function () {\n        return this.sun.timeAtAngle(degreesBelowHorizon.sunrise, true);\n      }\n    },\n    sunset: {\n      get: function () {\n        return this.sun.timeAtAngle(degreesBelowHorizon.sunrise);\n      }\n    },\n    sunriseEnd: {\n      get: function () {\n        return this.sun.timeAtAngle(degreesBelowHorizon.sunriseEnd, true);\n      }\n    },\n    sunsetStart: {\n      get: function () {\n        return this.sun.timeAtAngle(degreesBelowHorizon.sunriseEnd, false);\n      }\n    },\n    civilDawn: {\n      get: function () {\n        return this.sun.timeAtAngle(degreesBelowHorizon.twilight, true);\n      }\n    },\n    dawn: {\n      get: function () {\n        return this.civilDawn;\n      }\n    },\n    civilDusk: {\n      get: function () {\n        return this.sun.timeAtAngle(degreesBelowHorizon.twilight, false);\n      }\n    },\n    dusk: {\n      get: function () {\n        return this.civilDusk;\n      }\n    },\n    nauticalDawn: {\n      get: function () {\n        return this.sun.timeAtAngle(degreesBelowHorizon.nauticalTwilight, true);\n      }\n    },\n    nauticalDusk: {\n      get: function () {\n        return this.sun.timeAtAngle(degreesBelowHorizon.nauticalTwilight, false);\n      }\n    },\n    nightStart: {\n      get: function () {\n        return this.astronomicalDusk;\n      }\n    },\n    astronomicalDusk: {\n      get: function () {\n        return this.sun.timeAtAngle(degreesBelowHorizon.night, false);\n      }\n    },\n    astronomicalDawn: {\n      get: function () {\n        return this.sun.timeAtAngle(degreesBelowHorizon.night, true);\n      }\n    },\n    nightEnd: {\n      get: function () {\n        return this.astronomicalDawn;\n      }\n    },\n    goldenHourStart: {\n      get: function () {\n        return this.sun.timeAtAngle(degreesBelowHorizon.goldenHour, false);\n      }\n    },\n    goldenHourEnd: {\n      get: function () {\n        return this.sun.timeAtAngle(degreesBelowHorizon.goldenHour, true);\n      }\n    },\n    lunarDistance: {\n      get: function () {\n        return this.moon.distance;\n      }\n    },\n    lunarIlluminosity: {\n      get: function () {\n        return this.moon.illuminosity;\n      }\n    }\n  });\n\n  return SolarCalc;\n})();\n\nmodule.exports = SolarCalc;","'use strict';\n\nmodule.exports = require('./lib/solarCalc.js');\n","const colorIndexRegExp = /((?:not )?all and )?(\\(color-index:\\s*(22|48|70)\\))/i;\nvar client = (style => {\n  [].forEach.call(document.styleSheets, styleSheet => {\n    [].forEach.call(styleSheet.cssRules, cssRule => {\n      const mediaMatch = (Object(cssRule.media).mediaText || '').match(colorIndexRegExp);\n\n      if (mediaMatch) {\n        cssRule.media.mediaText = ((/^dark$/i.test(style) ? mediaMatch[3] === '48' : /^light$/i.test(style) ? mediaMatch[3] === '70' : mediaMatch[3] === '22') ? 'not all and ' : '') + cssRule.media.mediaText.replace(colorIndexRegExp, '$2');\n      }\n    });\n  });\n});\n\nexport default client;\n","const SolarCalc = require(\"solar-calc\");\nconst prefersColorScheme = require(\"css-prefers-color-scheme\").default;\n\nconst NAME = \"nightlife\";\nconst error = message => { throw new Error(`[${NAME}] ${message}`) }\nconst log = message => console.log(`[${NAME}] ${message}`)\n\nconst nightlife = {\n    calcSunriseAndSunset() {\n        return new Promise((resolve, reject) => navigator.geolocation.getCurrentPosition(resolve, reject))\n            .then(({ coords: { latitude, longitude } }) => {\n                return new SolarCalc(new Date(), latitude, longitude);\n            })\n            .catch(err => {\n                console.error(`Can't detect night time based on location, fallback to hour-based detection`, err)\n\n                let sunrise = new Date();\n                sunrise.setHours(6, 0, 0, 0);\n\n                let sunset = new Date();\n                sunset.setHours(18, 0, 0, 0);\n\n                return { sunrise, sunset }\n            })\n    },\n\n    toggleNightMode() {\n        return nightlife.calcSunriseAndSunset()\n            .then(({ sunrise, sunset }) => {\n                const isNight = Date.now() > sunset || Date.now() < sunrise;\n                prefersColorScheme(isNight ? 'dark' : 'light');\n                Object.assign(nightlife, { isNight, sunrise, sunset });\n                clearTimeout(nightlife.timeout);\n\n                if (isNight) {\n                    if (sunrise < Date.now()) sunrise.setDate(sunrise.getDate() + 1);\n                    nightlife.timeout = setTimeout(() => {\n                        log(`A new day has risen`)\n                        nightlife.toggleNightMode().then(() => nightlife.listeners.sunrise.forEach(cb => cb()))\n                    }, sunrise.getTime() - Date.now());\n                } else {\n                    if (sunset < Date.now()) sunset.setDate(sunset.getDate() + 1);\n                    nightlife.timeout = setTimeout(() => {\n                        log(`Night has fallen`)\n                        nightlife.toggleNightMode().then(() => nightlife.listeners.sunset.forEach(cb => cb()))\n                    }, sunset.getTime() - Date.now());\n                }\n\n                return isNight\n            })\n    },\n\n    listeners: { init: [], sunrise: [], sunset: [] },\n    on(event, cb) {\n        if (!this.listeners.hasOwnProperty(event)) error(`Unknown event: ${event}`);\n        nightlife.listeners[event].push(cb);\n    }\n}\n\nnightlife.toggleNightMode().then(() => nightlife.listeners.init.forEach(cb => cb()));\nwindow.nightlife = nightlife;"]}